An array is a data structure used to store multiple elements of the same type in
a single variable. It provides a systematic way to store and access elements using
indices. Arrays are widely used in programming to handle large amounts of
data efficiently.

1. Declaration and Initialization:

Arrays in C++ are declared by specifying the type of elements followed by the array
 name and size in square brackets.

Syntax:
type arrayName[arraySize];

Example:
int numbers[5]; // Declares an array of 5 integers

2. Accessing Elements:

Array elements are accessed using their index, starting from 0.

Example:

int first = numbers[0]; // Access the first element (1)
numbers[2] = 10; // Modify the third element to 10

3. Multidimensional Arrays:

C++ allows the creation of multi-dimensional arrays, like 2D arrays (matrices).

Initialization:
int matrix[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};

5. Limitations:

	•	Fixed Size: Once declared, the size of an array cannot change.
	•	No Bounds Checking: Accessing an invalid index (out of bounds) leads to undefined behavior.

6. C++ Standard Library Arrays:

C++ also offers std::array (from C++11) and std::vector, which are more flexible
 alternatives to raw arrays. They provide size determination, dynamic resizing,
  and more safety features.